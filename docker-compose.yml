version: '3.8'

services:
  rclone-gui:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: rclone-gui
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - RC_SERVER_HOST=localhost
      - RC_SERVER_PORT=5572
    volumes:
      - rclone-config:/home/nextjs/.config/rclone
      - rclone-cache:/home/nextjs/.cache/rclone
      - ./logs:/app/logs
      - /path/to/your/data:/data:ro  # 挂载您的数据目录
    restart: unless-stopped
    networks:
      - rclone-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 可选：Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: rclone-gui-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - rclone-gui
    restart: unless-stopped
    networks:
      - rclone-network

  # 可选：数据库 (如果需要持久化存储)
  postgres:
    image: postgres:15-alpine
    container_name: rclone-gui-db
    environment:
      POSTGRES_DB: rclone_gui
      POSTGRES_USER: rclone
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rclone_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - rclone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rclone -d rclone_gui"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 可选：Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: rclone-gui-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    networks:
      - rclone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  rclone-config:
    driver: local
  rclone-cache:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  rclone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
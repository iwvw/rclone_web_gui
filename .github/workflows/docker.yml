name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate deployment script
      if: github.event_name != 'pull_request'
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        # Auto-generated deployment script
        
        set -e
        
        # Configuration
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        TAG="${{ github.ref_name == 'main' && 'latest' || github.ref_name }}"
        CONTAINER_NAME="rclone-web-gui"
        PORT="3000"
        
        echo "🚀 Deploying Rclone Web GUI..."
        echo "Image: $IMAGE:$TAG"
        
        # Stop existing container
        if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
            echo "🛑 Stopping existing container..."
            docker stop $CONTAINER_NAME
        fi
        
        # Remove existing container
        if docker ps -aq -f name=$CONTAINER_NAME | grep -q .; then
            echo "🗑️  Removing existing container..."
            docker rm $CONTAINER_NAME
        fi
        
        # Pull latest image
        echo "📥 Pulling latest image..."
        docker pull $IMAGE:$TAG
        
        # Run new container
        echo "🏃 Starting new container..."
        docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p $PORT:3000 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v rclone-data:/app/data \
            -e NODE_ENV=production \
            $IMAGE:$TAG
        
        echo "✅ Deployment complete!"
        echo "🌐 Access your Rclone Web GUI at: http://localhost:$PORT"
        echo "📊 Check logs with: docker logs -f $CONTAINER_NAME"
        EOF
        
        chmod +x deploy.sh
        
    - name: Upload deployment script
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: deploy-script
        path: deploy.sh